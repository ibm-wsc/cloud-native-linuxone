{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cloud Native LinuxONE Workshop \u00b6 Welcome to our Cloud Native LinuxONE workshop. Developers can leverage OpenShift to create continuous integration pipelines for Linux\u00ae workloads on IBM Z\u00ae and LinuxONE. You can quickly get up and running on OpenShift with a continuous workflow. Agenda \u00b6 Introduction to Cloud Native Workshop Deploy Pet Clinic via OpenShift Pipelines Extend Pipeline to Upgrade from Delopment to Staging Acknowledgements \u00b6 Thanks to the following contributors: Chee Yee for setting up the LinuxONE Community Cloud for the OpenShift Pipelines workflow redhat-developer-demos for sharing the spring-petclinic sample application, specifically Burr Sutter who did most of the development on the sample application Workshop owners \u00b6 Barry Silliman Garrett Woodworth Jin VanStee","title":"Home"},{"location":"#cloud-native-linuxone-workshop","text":"Welcome to our Cloud Native LinuxONE workshop. Developers can leverage OpenShift to create continuous integration pipelines for Linux\u00ae workloads on IBM Z\u00ae and LinuxONE. You can quickly get up and running on OpenShift with a continuous workflow.","title":"Cloud Native LinuxONE Workshop"},{"location":"#agenda","text":"Introduction to Cloud Native Workshop Deploy Pet Clinic via OpenShift Pipelines Extend Pipeline to Upgrade from Delopment to Staging","title":"Agenda"},{"location":"#acknowledgements","text":"Thanks to the following contributors: Chee Yee for setting up the LinuxONE Community Cloud for the OpenShift Pipelines workflow redhat-developer-demos for sharing the spring-petclinic sample application, specifically Burr Sutter who did most of the development on the sample application","title":"Acknowledgements"},{"location":"#workshop-owners","text":"Barry Silliman Garrett Woodworth Jin VanStee","title":"Workshop owners"},{"location":"glossary/","text":"OCP / OpenShift Container Platform: a platform as a service using containers maintained and distributed by Red Hat from the open source offering Origin using Kubernetes as the underlying container orchestration software. Kubernetes (k8s): an open source, extensible container orchestrator Container image: a linux application image built as a static starting point for use with a container","title":"Glossary of terms"},{"location":"introduction/","text":"Cloud Native Workshop Introduction \u00b6 In this workshop, we will go over the Cloud Native way to setup and deploy an application using Openshift Container Platform and it's CI/CD workflow Openshift Pipelines. Overall Architecture Image \u00b6 Put finished picture here... Lab Overview \u00b6 This lab will see you open up an example virtual pet store running on LinuxONE using some source code on GitHub and OpenShift Pipelines to seamlessly update, test, and deploy your store. This lab is broken into two parts: Build and Deploying PetClinic Java Application Promoting PetClinic from development to staging with GitHub integration","title":"Introduction"},{"location":"introduction/#cloud-native-workshop-introduction","text":"In this workshop, we will go over the Cloud Native way to setup and deploy an application using Openshift Container Platform and it's CI/CD workflow Openshift Pipelines.","title":"Cloud Native Workshop Introduction"},{"location":"introduction/#overall-architecture-image","text":"Put finished picture here...","title":"Overall Architecture Image"},{"location":"introduction/#lab-overview","text":"This lab will see you open up an example virtual pet store running on LinuxONE using some source code on GitHub and OpenShift Pipelines to seamlessly update, test, and deploy your store. This lab is broken into two parts: Build and Deploying PetClinic Java Application Promoting PetClinic from development to staging with GitHub integration","title":"Lab Overview"},{"location":"prerequisites/","text":"Prerequisites \u00b6 Create a GitHub \u00b6 Create a GitHub account (if you don't already have one) here .","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"","title":"Prerequisites"},{"location":"prerequisites/#create-a-github","text":"Create a GitHub account (if you don't already have one) here .","title":"Create a GitHub"},{"location":"proposechange/","text":"How to propose a change \u00b6 On the page you want to make a change to, click on the pencil icon next to the page's title. This will take you to edit the page in Github. You will see a message similar to the following: \"You\u2019re editing a file in a project you don\u2019t have write access to. Submitting a change to this file will write it to a new branch in your fork, so you can send a pull request.\" Make your changes in Markdown. And submit for review. The owners of this repo will review your pull request and accept or deny your change proposal. There are other ways of doing a pull request, a Google search will lead you to those tutorials.","title":"Propose a change"},{"location":"proposechange/#how-to-propose-a-change","text":"On the page you want to make a change to, click on the pencil icon next to the page's title. This will take you to edit the page in Github. You will see a message similar to the following: \"You\u2019re editing a file in a project you don\u2019t have write access to. Submitting a change to this file will write it to a new branch in your fork, so you can send a pull request.\" Make your changes in Markdown. And submit for review. The owners of this repo will review your pull request and accept or deny your change proposal. There are other ways of doing a pull request, a Google search will lead you to those tutorials.","title":"How to propose a change"},{"location":"resources/","text":"Other Resources \u00b6 OpenShift Pipelines Resources \u00b6 Information Page Intro Series on OpenShift blog","title":"Other resources"},{"location":"resources/#other-resources","text":"","title":"Other Resources"},{"location":"resources/#openshift-pipelines-resources","text":"Information Page Intro Series on OpenShift blog","title":"OpenShift Pipelines Resources"},{"location":"application-promotion/action/","text":"Time to put it all in action for take 2 \u00b6","title":"Full pipeline in Action"},{"location":"application-promotion/action/#time-to-put-it-all-in-action-for-take-2","text":"","title":"Time to put it all in action for take 2"},{"location":"application-promotion/overview/","text":"It's time to get your pet clinic ready for its public dayview \u00b6 In this section, you will bring PetClinic from development to staging for the grand opening of your pet clinic (production). Testing Tasks Testing that the app runs successfully on the development cluster Testing that the app runs successfully on the staging cluster Promotion Tasks Deploying PetClinic to the staging cluster Running Pipeline Update PetClinic with changes and push to GitHub Trigger build pipeline and watch app move from staging to dev seamlessly Discussing ways to integrate OpenShift on LinuxONE as part of a greater multi-cloud ecosystem","title":"Section Overview"},{"location":"application-promotion/overview/#its-time-to-get-your-pet-clinic-ready-for-its-public-dayview","text":"In this section, you will bring PetClinic from development to staging for the grand opening of your pet clinic (production). Testing Tasks Testing that the app runs successfully on the development cluster Testing that the app runs successfully on the staging cluster Promotion Tasks Deploying PetClinic to the staging cluster Running Pipeline Update PetClinic with changes and push to GitHub Trigger build pipeline and watch app move from staging to dev seamlessly Discussing ways to integrate OpenShift on LinuxONE as part of a greater multi-cloud ecosystem","title":"It's time to get your pet clinic ready for its public dayview"},{"location":"application-promotion/promote/","text":"App Promotion Time \u00b6","title":"Promoting Application"},{"location":"application-promotion/promote/#app-promotion-time","text":"","title":"App Promotion Time"},{"location":"application-promotion/test/","text":"Testing Success to move to the big time \u00b6","title":"Testing Application"},{"location":"application-promotion/test/#testing-success-to-move-to-the-big-time","text":"","title":"Testing Success to move to the big time"},{"location":"build-and-deploy/overview/","text":"It's time to open up your pet clinic for testing \u00b6 In this section, we will build, test and deploy the Java web application for our pet clinic (PetClinic) and then automate the process using OpenShift Pipelines. This involves the following tasks: Get Your Pet Clinic Up and Running on OpenShift Deploying MySQL database Building PetClinic with automated testing Accessing PetClinic and adding your pet PetClinic Continuous Integration using OpenShift Pipelines Automate PetClinic and MySQL deployment Adding GitHub Integration and tag images Make clean image from S2I build Trigger pipeline with empty commit","title":"Section Overview"},{"location":"build-and-deploy/overview/#its-time-to-open-up-your-pet-clinic-for-testing","text":"In this section, we will build, test and deploy the Java web application for our pet clinic (PetClinic) and then automate the process using OpenShift Pipelines. This involves the following tasks: Get Your Pet Clinic Up and Running on OpenShift Deploying MySQL database Building PetClinic with automated testing Accessing PetClinic and adding your pet PetClinic Continuous Integration using OpenShift Pipelines Automate PetClinic and MySQL deployment Adding GitHub Integration and tag images Make clean image from S2I build Trigger pipeline with empty commit","title":"It's time to open up your pet clinic for testing"},{"location":"build-and-deploy/pipeline/","text":"Run time \u00b6","title":"PetClinic Meets OpenShift Pipelines"},{"location":"build-and-deploy/pipeline/#run-time","text":"","title":"Run time"},{"location":"build-and-deploy/upandrunning/","text":"Getting Your PetClinic Up and Running \u00b6 For this workshop we will be using the iconic Spring PetClinic application. The Spring PetClinic is a sample application designed to show how the Spring stack can be used to build simple, but powerful database-oriented applications. The official version of PetClinic demonstrates the use of Spring Boot with Spring MVC and Spring Data JPA. We will not be focusing on the ins and outs of the PetClinic application itself, but rather on leveraging OpenShift tooling to build a PetClinic cloud-native application and a DevOps pipeline for the application. We will start by building our PetClinic application from the source code and connecting it to a MySQL database. Info Because you are using the LinuxONE Community Cloud OpenShift trial, your project name will be different from the project name depicted in the diagrams below. You will be operating in your assigned project for the entirety of the lab. Note For this lab the green arrows or boxes denote something to look at, the red arrows or boxes denote something to click on or type. Deploying MySQL database \u00b6 1. First, we need to setup our mysql database. Luckily, this is very easy on OpenShift with the mysql template available from the main developer topology window. Follow the steps in the diagram below to bring up the available database options. 2. Next, select the MySQL (Ephemeral) tile. Note we are choosing the ephemeral option because at this point we do not care to persist the database beyond the life of the container. 3. Click on instantiate template. 4. Fill the wizard with the parameters as shown in the image below: Click the Create button. Again, we are using the Ephemeral implementation because this a short-lived demo and we do not need to retain the data. In a production system, you will most likely be using a permanent MySQL instance. This stores the data in a Persistent Volume (basically a virtual hard drive), meaning the MySQL pod can be destroyed and replaced with the data remaining intact. A minute or two later, in the Topology view of your OpenShift Console, you should see mysql in running state. (Click on the Topology icon for mysql to bring up the side panel) Fork the PetClinic repo to your own GitHub account \u00b6 For this workshop, you will be using the PetClinic application from your own GitHub account so that you can enable integrations with it later. To make a copy of the PetClinic application into your GitHub account, navigate to the following from your browser: https://github.com/ibm-wsc/spring-petclinic Then click on the fork button on the upper right corner. At this point you might need to log into GitHub if you weren't logged in already. Next, you might be presented with a screen to ask you to select where to fork to. Select your own user account to fork to. Please make a note of your repo URL for later, it should be something like: https://github.com/<your-github-username>/spring-petclinic That's it! You are ready to move on to the next section. Building and Deploying PetClinic Application \u00b6 There are multiple ways OpenShift enables cloud-native application developers to package up their applications and deploy them. For PetClinic, we will be building our application image from source, leveraging OpenShift's S2I (Source to Image) capability. This allows us to quickly test the building, packaging, and deployment of our application, and gives us the option to create and use a DevOps pipeline from this workflow. It's a good way to start to understand how OpenShift Pipelines work. 1. Start with choosing Add From Git: 2. Enter https://github.com/<your-github-ID>/spring-petclinic in the Git Repo URL field. Expand the Show Advanced Git Options section, and type in main for the Git Reference . This tells OpenShift which GitHub repo and branch to pull the source code from. 3. Scroll down to the Builder section. Select the OpenJ9 tile and select openj9-11-el8 as the builder image version. As you can see OpenShift offers many different builder images to help you build images from a variety of programming languages. Your list of builder images might differ from the screen shot. For Java on Z, the recommended JVM is OpenJ9 because it has built-in s390x optimizations as well as container optimizations. 4. In the General section, put in the following entries for Application Name and Name. 5. Scroll down to the Pipelines section, and check off the box next to Add pipeline . You can also expand the Show pipeline visualization section to see a visual of the build pipeline. 6. We are almost there! We will need to configure a couple of Advanced Options. First, click on Routing in the Advanced Options section to expand the Routing options. 7. In the Routing options section, only fill out the Security options as follows. You can leave the rest alone. These options will enable only TLS access to your PetClinic application. 8. You are done with configurations of this panel. Scroll all the way down and hit the Create button which will kick off the pipeline build of your PetClinic application. In a few seconds you will see your Topology with the new application icon. Hit the little pipeline icon in the diagram below to view the build logs. Note PLEASE BEWARE that if you are using the LinuxONE Community Cloud OpenShift Trial you might see lagginess with the log streaming. If it stops streaming you might want to go back out to the Topology view and once the pipeline completes, come back to the log view to see the logs. 9. The pipeline will go through three tasks: 1. fetch-repository - this will clone your Git PetClinic repo for the build task. 2. build - this is the build process which itself is broken down into a few sub-steps. This is the longest task in the pipeline, and can take up to 15 minutes. The steps that it goes through are as follows: STEP-GEN-ENV-FILE: this step generates the environment file to be used during the build process STEP-GENERATE: this step generates the Dockerfile that will be used to create the OCI image later on during the build step STEP-BUILD: this is the multi-step build process of creating an OCI image. It will download the required Maven Java packages, compile the Java application, run through a set of 39 unit tests on the application, and finally build the application jar file and the OCI image. If the tests fail, this step will not complete. STEP-PUSH: this last step pushes the built OCI image to the OpenShift image registry. 3. deploy - this will deploy the newly built image as a running deployment in your project. After this, your application will be running in a pod and be accessible via a route. Below is an image of the log of a successful build task: 10. Now if you go back to the Topology view, you should see the application has been successfully deployed to OpenShift as well. From here you can click on the open URL circle, and a new browser tab should open to lead you to your PetClinic's front page. Interacting with Your PetClinic Application and MySQL database \u00b6 In this section, you will add a new owner to the Pet Clinic application, and then go into your MySQL container to see if that owner was successfully added. 1. You Pet Clinic should look something similar to this. Go to the Find Owners tab, and create a new owner. 2. Click on the Add Owner button, and add an owner of your own, for example: 3. You can then go back to Find Owners and try searching for the owner that you just added. It should come back with the search results similar to the following. 4. Now let's check the MySQL database to make sure that the new owner you just added is in there. Return to your OpenShift console, from the Topology view, click on the mysql icon. This will bring up a side panel, and then click on the mysql pod (your pod name will be different than the picture): In the pod panel, go to the Terminal tab. Now type in the following commands in your mysql terminal: Let's run a SQL command now to verify that the owner that we added through the application is indeed in the database: Please let the instructors know, if you don't see your owner listed.","title":"PetClinic Up and Running"},{"location":"build-and-deploy/upandrunning/#getting-your-petclinic-up-and-running","text":"For this workshop we will be using the iconic Spring PetClinic application. The Spring PetClinic is a sample application designed to show how the Spring stack can be used to build simple, but powerful database-oriented applications. The official version of PetClinic demonstrates the use of Spring Boot with Spring MVC and Spring Data JPA. We will not be focusing on the ins and outs of the PetClinic application itself, but rather on leveraging OpenShift tooling to build a PetClinic cloud-native application and a DevOps pipeline for the application. We will start by building our PetClinic application from the source code and connecting it to a MySQL database. Info Because you are using the LinuxONE Community Cloud OpenShift trial, your project name will be different from the project name depicted in the diagrams below. You will be operating in your assigned project for the entirety of the lab. Note For this lab the green arrows or boxes denote something to look at, the red arrows or boxes denote something to click on or type.","title":"Getting Your PetClinic Up and Running"},{"location":"build-and-deploy/upandrunning/#deploying-mysql-database","text":"1. First, we need to setup our mysql database. Luckily, this is very easy on OpenShift with the mysql template available from the main developer topology window. Follow the steps in the diagram below to bring up the available database options. 2. Next, select the MySQL (Ephemeral) tile. Note we are choosing the ephemeral option because at this point we do not care to persist the database beyond the life of the container. 3. Click on instantiate template. 4. Fill the wizard with the parameters as shown in the image below: Click the Create button. Again, we are using the Ephemeral implementation because this a short-lived demo and we do not need to retain the data. In a production system, you will most likely be using a permanent MySQL instance. This stores the data in a Persistent Volume (basically a virtual hard drive), meaning the MySQL pod can be destroyed and replaced with the data remaining intact. A minute or two later, in the Topology view of your OpenShift Console, you should see mysql in running state. (Click on the Topology icon for mysql to bring up the side panel)","title":"Deploying MySQL database"},{"location":"build-and-deploy/upandrunning/#fork-the-petclinic-repo-to-your-own-github-account","text":"For this workshop, you will be using the PetClinic application from your own GitHub account so that you can enable integrations with it later. To make a copy of the PetClinic application into your GitHub account, navigate to the following from your browser: https://github.com/ibm-wsc/spring-petclinic Then click on the fork button on the upper right corner. At this point you might need to log into GitHub if you weren't logged in already. Next, you might be presented with a screen to ask you to select where to fork to. Select your own user account to fork to. Please make a note of your repo URL for later, it should be something like: https://github.com/<your-github-username>/spring-petclinic That's it! You are ready to move on to the next section.","title":"Fork the PetClinic repo to your own GitHub account"},{"location":"build-and-deploy/upandrunning/#building-and-deploying-petclinic-application","text":"There are multiple ways OpenShift enables cloud-native application developers to package up their applications and deploy them. For PetClinic, we will be building our application image from source, leveraging OpenShift's S2I (Source to Image) capability. This allows us to quickly test the building, packaging, and deployment of our application, and gives us the option to create and use a DevOps pipeline from this workflow. It's a good way to start to understand how OpenShift Pipelines work. 1. Start with choosing Add From Git: 2. Enter https://github.com/<your-github-ID>/spring-petclinic in the Git Repo URL field. Expand the Show Advanced Git Options section, and type in main for the Git Reference . This tells OpenShift which GitHub repo and branch to pull the source code from. 3. Scroll down to the Builder section. Select the OpenJ9 tile and select openj9-11-el8 as the builder image version. As you can see OpenShift offers many different builder images to help you build images from a variety of programming languages. Your list of builder images might differ from the screen shot. For Java on Z, the recommended JVM is OpenJ9 because it has built-in s390x optimizations as well as container optimizations. 4. In the General section, put in the following entries for Application Name and Name. 5. Scroll down to the Pipelines section, and check off the box next to Add pipeline . You can also expand the Show pipeline visualization section to see a visual of the build pipeline. 6. We are almost there! We will need to configure a couple of Advanced Options. First, click on Routing in the Advanced Options section to expand the Routing options. 7. In the Routing options section, only fill out the Security options as follows. You can leave the rest alone. These options will enable only TLS access to your PetClinic application. 8. You are done with configurations of this panel. Scroll all the way down and hit the Create button which will kick off the pipeline build of your PetClinic application. In a few seconds you will see your Topology with the new application icon. Hit the little pipeline icon in the diagram below to view the build logs. Note PLEASE BEWARE that if you are using the LinuxONE Community Cloud OpenShift Trial you might see lagginess with the log streaming. If it stops streaming you might want to go back out to the Topology view and once the pipeline completes, come back to the log view to see the logs. 9. The pipeline will go through three tasks: 1. fetch-repository - this will clone your Git PetClinic repo for the build task. 2. build - this is the build process which itself is broken down into a few sub-steps. This is the longest task in the pipeline, and can take up to 15 minutes. The steps that it goes through are as follows: STEP-GEN-ENV-FILE: this step generates the environment file to be used during the build process STEP-GENERATE: this step generates the Dockerfile that will be used to create the OCI image later on during the build step STEP-BUILD: this is the multi-step build process of creating an OCI image. It will download the required Maven Java packages, compile the Java application, run through a set of 39 unit tests on the application, and finally build the application jar file and the OCI image. If the tests fail, this step will not complete. STEP-PUSH: this last step pushes the built OCI image to the OpenShift image registry. 3. deploy - this will deploy the newly built image as a running deployment in your project. After this, your application will be running in a pod and be accessible via a route. Below is an image of the log of a successful build task: 10. Now if you go back to the Topology view, you should see the application has been successfully deployed to OpenShift as well. From here you can click on the open URL circle, and a new browser tab should open to lead you to your PetClinic's front page.","title":"Building and Deploying PetClinic Application"},{"location":"build-and-deploy/upandrunning/#interacting-with-your-petclinic-application-and-mysql-database","text":"In this section, you will add a new owner to the Pet Clinic application, and then go into your MySQL container to see if that owner was successfully added. 1. You Pet Clinic should look something similar to this. Go to the Find Owners tab, and create a new owner. 2. Click on the Add Owner button, and add an owner of your own, for example: 3. You can then go back to Find Owners and try searching for the owner that you just added. It should come back with the search results similar to the following. 4. Now let's check the MySQL database to make sure that the new owner you just added is in there. Return to your OpenShift console, from the Topology view, click on the mysql icon. This will bring up a side panel, and then click on the mysql pod (your pod name will be different than the picture): In the pod panel, go to the Terminal tab. Now type in the following commands in your mysql terminal: Let's run a SQL command now to verify that the owner that we added through the application is indeed in the database: Please let the instructors know, if you don't see your owner listed.","title":"Interacting with Your PetClinic Application and MySQL database"}]}